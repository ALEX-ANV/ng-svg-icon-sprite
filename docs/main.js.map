{"version":3,"sources":["./dist/ng-svg-icon-sprite/fesm5/ng-svg-icon-sprite.js","./src/app/app.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiJ;AAClG;;AAE/C;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,uCAAuC,OAAO,sDAAQ,EAAE;AACjE,MAAM;AACN,2DAA2D,wEAAkB,EAAE,gDAAgD,8BAA8B,8DAAQ,uBAAuB,EAAE,gDAAgD;AAC9O;AACA,CAAC;AACD,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,0QAA0Q,OAAO,gXAAgX,OAAO,0ZAA0Z,OAAO,6cAA6c,OAAO;AAC7/C,kDAAkD,kBAAkB;AACpE,iBAAiB;AACjB;AACA;AACA,sDAAsD;AACtD,SAAS;AACT,MAAM;AACN;AACA,eAAe,OAAO,mDAAK,EAAE;AAC7B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,kBAAkB,OAAO,mDAAK,EAAE;AAChC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,+BAA+B,OAAO,mDAAK,EAAE;AAC7C,qBAAqB,OAAO,mDAAK,EAAE;AACnC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B;AACA;AACA,CAAC;AACD,WAAW,EAsBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,2CAA2C,EAAE;AAC7C;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,sDAAsD;AACtD,SAAS,OAAO,uDAAS,EAAE;AAC3B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC;AACA;AACA,CAAC;AACD,WAAW,EAOV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;;AAEiH;AACjH;;;;;;;;;;;;AC7PA,yhBAAyhB,0FAA0F,IAAI,aAAa,oBAAoB,GAAG,IAAI,mBAAmB,IAAI,GAAG,IAAI,iPAAiP,6GAA6G,IAAI,aAAa,+QAA+Q,2KAA2K,GAAG,IAAI,gBAAgB,GAAG,IAAI,qBAAqB,GAAG,IAAI,cAAc,GAAG,IAAI,uBAAuB,wBAAwB,yaAAya,wLAAwL,GAAG,IAAI,kDAAkD,IAAI,GAAG,IAAI,6FAA6F,qOAAqO,GAAG,IAAI,+CAA+C,IAAI,GAAG,IAAI,guBAAguB,qCAAqC,MAAM,0HAA0H,IAAI,aAAa,2QAA2Q,wCAAwC,MAAM,6HAA6H,IAAI,aAAa,mjBAAmjB,GAAG,IAAI,oBAAoB,GAAG,IAAI,2BAA2B,WAAW,GAAG,IAAI,eAAe,GAAG,IAAI,oCAAoC,gBAAgB,GAAG,IAAI,+CAA+C,GAAG,IAAI,gCAAgC,GAAG,IAAI,6CAA6C,OAAO,8DAA8D,IAAI,aAAa,2EAA2E,uQAAuQ,kDAAkD,mBAAmB,m8BAAm8B,OAAO,gFAAgF,IAAI,aAAa,qdAAqd,0KAA0K,IAAI,aAAa,4GAA4G,mCAAmC,eAAe,UAAU,uuBAAuuB,iLAAiL,SAAS,mFAAmF,MAAM,aAAa,+kB;;;;;;;;;;;ACA7pQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,6CAA6C,QAAQ,+BAA+B,KAAK,SAAS,iCAAiC,KAAK,SAAS,+BAA+B,KAAK,UAAU,kCAAkC,KAAK,GAAG,qBAAqB,QAAQ,+BAA+B,KAAK,SAAS,iCAAiC,KAAK,SAAS,+BAA+B,KAAK,UAAU,kCAAkC,KAAK,GAAG,oBAAoB,mBAAmB,2CAA2C,wCAAwC,wCAAwC,GAAG,kDAAkD,eAAe,iCAAiC,iCAAiC,GAAG,oBAAoB,qBAAqB,uCAAuC,GAAG,kDAAkD,qBAAqB,GAAG,oBAAoB,2CAA2C,wCAAwC,wCAAwC,GAAG,kDAAkD,8BAA8B,8BAA8B,GAAG,oBAAoB,mBAAmB,GAAG,kDAAkD,iBAAiB,GAAG,oBAAoB,sBAAsB,uCAAuC,GAAG,kDAAkD,yBAAyB,GAAG,oBAAoB,2CAA2C,wCAAwC,wCAAwC,GAAG,kDAAkD,8BAA8B,GAAG,oBAAoB,8BAA8B,8BAA8B,GAAG,kBAAkB,4BAA4B,4BAA4B,GAAG,yCAAyC,iBAAiB,4DAA4D,GAAG,mCAAmC,gCAAgC,qCAAqC,qCAAqC,GAAG,6CAA6C,u5K;;;;;;;;;;;;;;;;;;ACAhiE;AACK;AAOvD;IAQE;IACE,iEAAiE;IACzD,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QARvC,SAAI,GAAG,sBAAsB,CAAC;QAC9B,UAAK,GAAG,OAAO,CAAC;QAChB,UAAK,GAAG,KAAK,CAAC;QACd,YAAO,GAAG,KAAK,CAAC;QAChB,eAAU,GAAG,KAAK,CAAC;IAKvB,CAAC;IAEJ,+BAAQ,GAAR,cAAY,CAAC;IAEb,qCAAc,GAAd,UAAe,GAAG;QAChB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,cAAc,CAAC;QAC3F,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,yCAAkB,GAAlB,UAAmB,KAAK;QACtB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IAC3D,CAAC;IAED,0CAAmB,GAAnB,UAAoB,KAAK;QACvB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IAC3D,CAAC;IAED,sCAAe,GAAf,UAAgB,KAAK;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,4DAA4D;IAC5D,8CAAuB,GAAvB;QAAA,iBASC;QARC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;QACtE,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC;QAEzE,UAAU,CAAC;YACT,oDAAoD;YACpD,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;;gBAhC4B,oEAAiB;;IAVnC,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,uIAAmC;;SAEpC,CAAC;+EAW6B,oEAAiB;OAVnC,YAAY,CA2CxB;IAAD,mBAAC;CAAA;AA3CwB;;;;;;;;;;;;;;;;;;;;;;ACRiC;AACjB;AACM;AACO;AACI;AAc1D;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,mEAAgB,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,qEAAW,CAAC,UAAU,EAAE,CAAC;aAC3D;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AClBtB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,UAAU,EAAE,2BAA2B;CACxC,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["import { Injectable, Optional, ɵɵdefineInjectable, ɵɵinject, Component, Input, Directive, Renderer2, ElementRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar IconSpriteConfig = /** @class */ (function () {\n    function IconSpriteConfig() {\n    }\n    return IconSpriteConfig;\n}());\nif (false) {\n    /** @type {?} */\n    IconSpriteConfig.prototype.path;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To access a global sprite path\n */\nvar IconSpriteService = /** @class */ (function () {\n    function IconSpriteService(config) {\n        if (config) {\n            this.setPath(config.path);\n        }\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    IconSpriteService.prototype.setPath = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        this.spritePath = path;\n    };\n    /**\n     * @return {?}\n     */\n    IconSpriteService.prototype.getPath = /**\n     * @return {?}\n     */\n    function () {\n        return this.spritePath;\n    };\n    IconSpriteService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    IconSpriteService.ctorParameters = function () { return [\n        { type: IconSpriteConfig, decorators: [{ type: Optional }] }\n    ]; };\n    /** @nocollapse */ IconSpriteService.ngInjectableDef = ɵɵdefineInjectable({ factory: function IconSpriteService_Factory() { return new IconSpriteService(ɵɵinject(IconSpriteConfig, 8)); }, token: IconSpriteService, providedIn: \"root\" });\n    return IconSpriteService;\n}());\nif (false) {\n    /** @type {?} */\n    IconSpriteService.prototype.spritePath;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar IconSpriteComponent = /** @class */ (function () {\n    function IconSpriteComponent(iconSpriteService) {\n        this.iconSpriteService = iconSpriteService;\n        this.classes = 'icon';\n        this.width = '100%';\n        this.preserveAspectRatio = 'xMinYMax meet';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    IconSpriteComponent.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // If the src does not contain a # and a spritePath is set via the service, concatenate them\n        if (this.src && !this.src.includes('#') && this.iconSpriteService.spritePath) {\n            this.src = this.iconSpriteService.getPath() + \"#\" + this.src;\n        }\n    };\n    IconSpriteComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'svg-icon-sprite',\n                    template: \"<ng-container *ngIf=\\\"!viewBox && !attribute\\\">\\n  <svg [attr.class]=\\\"classes\\\"\\n       [attr.width]=\\\"width\\\"\\n       [attr.height]=\\\"height || width\\\">\\n    <title *ngIf=\\\"title && src\\\" [attr.id]=\\\"src.split('#')[1] + '-title'\\\">{{title}}</title>\\n    <use [attr.xlink:href]=\\\"src\\\"></use>\\n  </svg>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"!viewBox && attribute\\\">\\n  <svg [attr.class]=\\\"classes\\\"\\n       [attr.width]=\\\"width\\\"\\n       [attr.height]=\\\"height || width\\\"\\n       svgIconSpriteAttr [attribute]=\\\"attribute\\\">\\n    <title *ngIf=\\\"title && src\\\" [attr.id]=\\\"src.split('#')[1] + '-title'\\\">{{title}}</title>\\n    <use [attr.xlink:href]=\\\"src\\\"></use>\\n  </svg>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"viewBox && !attribute\\\">\\n  <svg [attr.class]=\\\"classes\\\"\\n       [attr.width]=\\\"width\\\"\\n       [attr.height]=\\\"height || width\\\"\\n       [attr.viewBox]=\\\"viewBox\\\"\\n       [attr.preserveAspectRatio]=\\\"preserveAspectRatio\\\">\\n    <title *ngIf=\\\"title && src\\\" [attr.id]=\\\"src.split('#')[1] + '-title'\\\">{{title}}</title>\\n    <use [attr.xlink:href]=\\\"src\\\"></use>\\n  </svg>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"viewBox && attribute\\\">\\n  <svg [attr.class]=\\\"classes\\\"\\n       [attr.width]=\\\"width\\\"\\n       [attr.height]=\\\"height || width\\\"\\n       [attr.viewBox]=\\\"viewBox\\\"\\n       [attr.preserveAspectRatio]=\\\"preserveAspectRatio\\\"\\n       svgIconSpriteAttr [attribute]=\\\"attribute\\\">\\n    <title *ngIf=\\\"title && src\\\" [attr.id]=\\\"src.split('#')[1] + '-title'\\\">{{title}}</title>\\n    <use [attr.xlink:href]=\\\"src\\\"></use>\\n  </svg>\\n</ng-container>\\n\",\n                    styles: [\":host svg,:host use{fill:currentColor}\"]\n                }] }\n    ];\n    /** @nocollapse */\n    IconSpriteComponent.ctorParameters = function () { return [\n        { type: IconSpriteService }\n    ]; };\n    IconSpriteComponent.propDecorators = {\n        src: [{ type: Input }],\n        classes: [{ type: Input }],\n        width: [{ type: Input }],\n        height: [{ type: Input }],\n        viewBox: [{ type: Input }],\n        preserveAspectRatio: [{ type: Input }],\n        attribute: [{ type: Input }],\n        title: [{ type: Input }]\n    };\n    return IconSpriteComponent;\n}());\nif (false) {\n    /** @type {?} */\n    IconSpriteComponent.prototype.src;\n    /** @type {?} */\n    IconSpriteComponent.prototype.classes;\n    /** @type {?} */\n    IconSpriteComponent.prototype.width;\n    /** @type {?} */\n    IconSpriteComponent.prototype.height;\n    /** @type {?} */\n    IconSpriteComponent.prototype.viewBox;\n    /** @type {?} */\n    IconSpriteComponent.prototype.preserveAspectRatio;\n    /** @type {?} */\n    IconSpriteComponent.prototype.attribute;\n    /** @type {?} */\n    IconSpriteComponent.prototype.title;\n    /**\n     * @type {?}\n     * @private\n     */\n    IconSpriteComponent.prototype.iconSpriteService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Set your own attribute key/value pairs on the generated SVG element, i.e. focusable=\"false\"\n */\nvar IconSpriteDirective = /** @class */ (function () {\n    function IconSpriteDirective(renderer, el) {\n        this.renderer = renderer;\n        this.el = el;\n    }\n    /**\n     * @return {?}\n     */\n    IconSpriteDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (Array.isArray(this.attribute[0])) {\n            /** @type {?} */\n            var attributeArr = (/** @type {?} */ (this.attribute));\n            attributeArr.forEach((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            function (obj) {\n                _this.renderer.setAttribute(_this.el.nativeElement, obj[0], obj[1] ? obj[1] : '');\n            }));\n        }\n        else {\n            /** @type {?} */\n            var attribute = (/** @type {?} */ (this.attribute));\n            if (attribute[0]) {\n                this.renderer.setAttribute(this.el.nativeElement, attribute[0], attribute[1] ? attribute[1] : '');\n            }\n        }\n    };\n    IconSpriteDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[svgIconSpriteAttr]'\n                },] }\n    ];\n    /** @nocollapse */\n    IconSpriteDirective.ctorParameters = function () { return [\n        { type: Renderer2 },\n        { type: ElementRef }\n    ]; };\n    IconSpriteDirective.propDecorators = {\n        attribute: [{ type: Input }]\n    };\n    return IconSpriteDirective;\n}());\nif (false) {\n    /** @type {?} */\n    IconSpriteDirective.prototype.attribute;\n    /** @type {?} */\n    IconSpriteDirective.prototype.renderer;\n    /** @type {?} */\n    IconSpriteDirective.prototype.el;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Using forRoot({ path: 'filepath' }), this module can be provided as a\n * singleton for the global application (including lazy loaded submodules).\n */\nvar IconSpriteModule = /** @class */ (function () {\n    function IconSpriteModule() {\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    IconSpriteModule.forRoot = /**\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        return {\n            ngModule: IconSpriteModule,\n            providers: [\n                { provide: IconSpriteConfig, useValue: config }\n            ]\n        };\n    };\n    IconSpriteModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    declarations: [\n                        IconSpriteComponent,\n                        IconSpriteDirective\n                    ],\n                    exports: [IconSpriteComponent]\n                },] }\n    ];\n    return IconSpriteModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { IconSpriteComponent, IconSpriteConfig, IconSpriteModule, IconSpriteService, IconSpriteDirective as ɵa };\n//# sourceMappingURL=ng-svg-icon-sprite.js.map\n","module.exports = \"<div class=\\\"container\\\" *ngIf=\\\"!changed\\\">\\n  <h1>SVG-Icon-Sprite <small>Demo</small></h1>\\n\\n  <h2>The Basics <small>(reference, width and styling)</small></h2>\\n\\n  <p>To display the icons in original size match the <code>[width]</code> and <code>[height]</code> with the width/height of the equivalent SVG.</p>\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-1\\\">\\n        <svg-icon-sprite src=\\\"star_100x100\\\" [width]=\\\"'100px'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>&lt;svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#star_100x100'\\\" [width]=\\\"'100px'\\\"&gt;&lt;/svg-icon&gt;\\n\\n.icon-example {{ '{' }}\\n  color: darkred;\\n{{ '}' }}</pre>\\n    </li>\\n    <li>\\n      <div class=\\\"icon-row icon-examples-2\\\">\\n        <svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#delete_70x70'\\\" [width]=\\\"'70px'\\\" [height]=\\\"'65px'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>&lt;svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#delete_70x70'\\\" [width]=\\\"'70px'\\\" [height]=\\\"'65px'\\\"&gt;&lt;/svg-icon&gt;</pre>\\n    </li>\\n  </ul>\\n  <p>To access the inner SVG properties like <strong>fill</strong> or <strong>stroke</strong> via CSS use <code>::ng-deep</code></p>\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-3\\\" style=\\\"padding-top: 20px;\\\">\\n        <svg-icon-sprite [src]=\\\"'star_100x100_viewbox'\\\" [width]=\\\"'100px'\\\" [classes]=\\\"'styled-icon'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>\\n.container {{ '{' }}\\n  ::ng-deep {{ '{' }}\\n    .styled-icon {{ '{' }}\\n      use {{ '{' }}\\n        fill: orange;\\n        stroke: black;</pre>\\n    </li>\\n  </ul>\\n\\n\\n  <h2 id=\\\"scaling\\\">Scaling <small>(using CSS transform)</small></h2>\\n\\n  <p>Use this pattern if you want to change the size of the original SVG. Apply same rules as above, wrap the SVG into a div and size it using CSS transforms.</p>\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-2\\\">\\n        <div class=\\\"icon-scale-down\\\" style=\\\"padding-bottom: 20px;\\\">\\n          <svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#delete_70x70'\\\" [width]=\\\"'70px'\\\"></svg-icon-sprite>\\n        </div>\\n      </div>\\n      <pre>\\n.icon-scale-down {{ '{' }}\\n  // Scale down by 50%\\n  transform: scale(0.5);\\n{{ '}' }}</pre>\\n    </li>\\n    <li>\\n      <div class=\\\"icon-row icon-examples-4\\\" style=\\\"height: 0;\\\">\\n        <div class=\\\"icon-scale-up\\\">\\n          <svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#circle_24x24-viewbox'\\\" [width]=\\\"'24px'\\\"></svg-icon-sprite>\\n        </div>\\n      </div>\\n      <pre>\\n.icon-scale-up {{ '{' }}\\n  // Scale up by 500%\\n  transform: scale(5);\\n{{ '}' }}\\n      </pre>\\n    </li>\\n  </ul>\\n\\n  <h2 id=\\\"viewBox\\\">Scaling <small>(using viewBox)</small></h2>\\n\\n  This is an alternative to the CSS scaling method presented above. Scaling via <code>viewBox</code> is <strong>less consistent across browsers</strong>.\\n  The pattern depends on your SVG source file, whether it already contains a <code>viewBox</code> or not.\\n  The following example SVGs with an original size of <code>100x100px</code> are scaled down by 50%.\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-2\\\">\\n        <svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#star_100x100'\\\" [width]=\\\"'100px'\\\" [viewBox]=\\\"'-50 -50 200 200'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>\\n&lt;!-- SVG source lacks a viewBox --&gt;\\n&lt;svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#star_100x100'\\\" [width]=\\\"'100px'\\\" [viewBox]=\\\"'-50 -50 200 200'\\\"&gt;&lt;/svg-icon&gt;\\n      </pre>\\n    </li>\\n    <li>\\n      <div class=\\\"icon-row icon-examples-3\\\">\\n        <svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#star_100x100_viewbox'\\\" [width]=\\\"'50px'\\\" [viewBox]=\\\"'0 0 100 100'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>\\n&lt;!-- SVG source contains a viewBox --&gt;\\n&lt;svg-icon-sprite [src]=\\\"'assets/sprites/sprite.svg#star_100x100_viewbox'\\\" [width]=\\\"'50px'\\\" [viewBox]=\\\"'0 0 100 100'\\\"&gt;&lt;/svg-icon&gt;\\n      </pre>\\n    </li>\\n  </ul>\\n\\n  <h2 id=\\\"defaultpath\\\">Default sprite path</h2>\\n\\n  Set the sprite path in your <code>environment.ts</code> and set the default path using <code>forRoot()</code>. Now you\\n  can invoke the component and simply pass the plain icon name as <code>[src]</code>.\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row\\\" style=\\\"padding-top: 30px\\\">\\n        <svg-icon-sprite [src]=\\\"'delete_70x70'\\\" [width]=\\\"'100px'\\\"></svg-icon-sprite>\\n      </div>\\n      <div class=\\\"pre-vertical\\\">\\n        <pre>\\nimport {{ '{' }} IconSpriteModule {{ '}' }} from 'ng-svg-icon-sprite';\\nimport {{ '{' }} environment {{ '}' }} from '../environments/environment';\\n\\n@NgModule({{ '{' }}\\n  imports: [\\n    IconSpriteModule.forRoot({{ '{' }} path: environment.spritePath {{ '}' }})\\n</pre>\\n        <pre style=\\\"height: 25px;\\\">&lt;svg-icon-sprite [src]=\\\"'star_100x100'\\\" [width]=\\\"width\\\"&gt;&lt;/svg-icon&gt;</pre>\\n      </div>\\n    </li>\\n  </ul>\\n\\n  <p style=\\\"padding-left: 25%;\\\">\\n    <strong>Advanced Tip:</strong> to change the sprite path during runtime, inject the <code>iconSpriteService</code> anywhere and execute <code>this.iconSpriteService.setPath('new-path.svg')</code>\\n    Re-render all icon-components afterwards!\\n    &nbsp;\\n    <button (click)=\\\"changeDefaultSpritePath(); changeDone = true;\\\" [disabled]=\\\"changeDone\\\">Change and render</button>\\n  </p>\\n\\n  <h2 id=\\\"manipulation\\\">Manipulation <small>(using dynamic icon path)</small></h2>\\n\\n  <button (click)=\\\"changeIconPath(iconSprite.src)\\\">Change Icon Path</button>\\n  <button [disabled]=\\\"iconSprite.width.split('px')[0] <= 20\\\" (click)=\\\"changeIconSizeMinus(iconSprite.width)\\\">Size -</button>\\n  <button (click)=\\\"changeIconSizePlus(iconSprite.width)\\\">Size +</button>\\n  <input #colorInput type=\\\"text\\\" value=\\\"blue\\\">\\n  <button (click)=\\\"changeIconColor(colorInput.value)\\\">Set color</button>\\n\\n  <ul class=\\\"vertical\\\">\\n    <li class=\\\"icon-change-size\\\">\\n      <div class=\\\"icon-row\\\" [style.color]=\\\"color\\\">\\n        <svg-icon-sprite #iconSprite [src]=\\\"icon\\\" [width]=\\\"width\\\" [viewBox]=\\\"'0 0 100 100'\\\"></svg-icon-sprite>\\n        <!-- Alternatively use the full sprite path via: [src]=\\\"'assets/sprites/sprite.svg#' + icon\\\" -->\\n      </div>\\n      <pre style=\\\"height: 30px;\\\">&lt;svg-icon-sprite [src]=\\\"icon\\\" [width]=\\\"width\\\" [viewBox]=\\\"'0 0 100 100'\\\"&gt;&lt;/svg-icon&gt;</pre>\\n    </li>\\n  </ul>\\n\\n  <h2 id=\\\"a11y\\\">Accessible example <small>(meaningful icon pattern)</small></h2>\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-5\\\">\\n        <svg-icon-sprite\\n          [src]=\\\"'star_100x100'\\\"\\n          [width]=\\\"'100px'\\\"\\n          [title]=\\\"'Orange star'\\\"\\n          [attribute]=\\\"[['aria-labelledby', 'star_100x100-title'], ['role', 'img']]\\\"></svg-icon-sprite>\\n      </div>\\n      <pre>\\n&lt;svg-icon-sprite\\n      [src]=\\\"'star_100x100'\\\"\\n      [title]=\\\"'Orange star'\\\"\\n      [attribute]=\\\"[['aria-labelledby', 'star_100x100-title'], ['role', 'img']]\\\"\\n&gt;&lt;/svg-icon&gt;\\n      </pre>\\n    </li>\\n  </ul>\\n\\n  Adding <code>[title]=\\\"'Orange star'\\\"</code> will render <code>&lt;title id=\\\"star_100x100-title\\\"&gt;Orange star&lt;/title&gt;</code> as the first child of the SVG node and serve as alternative text for screen readers.\\n  To improve support, you can additionally reference the title's node via <code>'aria-labelledby'</code> using the title's generated id <code>star_100x100-title</code> and set the <code>role</code> to <code>img</code>.\\n\\n  <h2 id=\\\"multicolor\\\">Multicolor Icons <small>(preserving svg properties)</small></h2>\\n\\n  If you want to include an multicolor icon, you will have to provide it form a separate sprite file (where the fill and stroke attributes are not stripped).\\n  Remember that you will not be able to overwrite styles it's via CSS.\\n\\n  <ul class=\\\"vertical\\\">\\n    <li>\\n      <div class=\\\"icon-row icon-examples-6\\\" style=\\\"width: 33%;\\\">\\n        <svg-icon-sprite [src]=\\\"'assets/sprites/image-sprite.svg#multicolor-image'\\\" [width]=\\\"'250px'\\\"></svg-icon-sprite>\\n      </div>\\n      <pre style=\\\"height: 70px;\\\">\\n&lt;svg-icon-sprite\\n  [src]=\\\"'assets/sprites/image-sprite.svg#multicolor-image'\\\"&gt;\\n&lt;/svg-icon&gt;</pre>\\n    </li>\\n  </ul>\\n\\n  <p>\\n    Report bugs or feature requests on <a href=\\\"https://github.com/jannicz/ng-svg-icon-sprite/issues\\\">Github Issues</a>\\n  </p>\\n\\n  <ul>\\n    <li>\\n      <a href=\\\"https://github.com/jannicz/ng-svg-icon-sprite\\\">\\n        <strong>ng-svg-icon-sprite sources on Github</strong>\\n      </a>\\n    </li>\\n    <li>\\n      <a href=\\\"https://www.npmjs.com/package/ng-svg-icon-sprite\\\">\\n        <strong>ng-svg-icon-sprite package on npm</strong>\\n      </a>\\n    </li>\\n  </ul>\\n\\n  <p>\\n    <small>Copyright Jan Suwart, MIT license</small>\\n  </p>\\n</div>\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"@-webkit-keyframes mymove {\\n  0% {\\n    transform: translateX(0);\\n  }\\n  50% {\\n    transform: translateX(2px);\\n  }\\n  75% {\\n    transform: translateX(0);\\n  }\\n  100% {\\n    transform: translateX(-2px);\\n  }\\n}\\n@keyframes mymove {\\n  0% {\\n    transform: translateX(0);\\n  }\\n  50% {\\n    transform: translateX(2px);\\n  }\\n  75% {\\n    transform: translateX(0);\\n  }\\n  100% {\\n    transform: translateX(-2px);\\n  }\\n}\\n.icon-examples-1 {\\n  color: darkred;\\n  transition: transform ease-in-out 0.2s;\\n  -ms-transform-origin: center center;\\n      transform-origin: center center;\\n}\\n.icon-examples-1:hover, .icon-examples-1:focus {\\n  color: red;\\n  -ms-transform: rotate(12deg);\\n      transform: rotate(12deg);\\n}\\n.icon-examples-2 {\\n  color: darkgreen;\\n  transition: color ease-in-out 0.4s;\\n}\\n.icon-examples-2:hover, .icon-examples-2:focus {\\n  color: limegreen;\\n}\\n.icon-examples-3 {\\n  transition: transform ease-in-out 0.2s;\\n  -ms-transform-origin: center center;\\n      transform-origin: center center;\\n}\\n.icon-examples-3:hover, .icon-examples-3:focus {\\n  -ms-transform: scale(1.1);\\n      transform: scale(1.1);\\n}\\n.icon-examples-4 {\\n  color: darkred;\\n}\\n.icon-examples-4:hover, .icon-examples-4:focus {\\n  color: brown;\\n}\\n.icon-examples-5 {\\n  color: darkorange;\\n  transition: color ease-in-out 0.1s;\\n}\\n.icon-examples-5:hover, .icon-examples-5:focus {\\n  color: darkgoldenrod;\\n}\\n.icon-examples-6 {\\n  transition: transform ease-in-out 0.1s;\\n  -ms-transform-origin: center center;\\n      transform-origin: center center;\\n}\\n.icon-examples-6:hover, .icon-examples-6:focus {\\n  transform: rotateY(30deg);\\n}\\n.icon-scale-down {\\n  -ms-transform: scale(0.5);\\n      transform: scale(0.5);\\n}\\n.icon-scale-up {\\n  -ms-transform: scale(5);\\n      transform: scale(5);\\n}\\n.container ::ng-deep .styled-icon use {\\n  fill: orange;\\n  /* evergreen browser symbol styling */\\n  stroke: black;\\n}\\n.icon-change-size ::ng-deep svg {\\n  transition: all linear 0.2s;\\n  -ms-transform-origin: top center;\\n      transform-origin: top center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYW4uc3V3YXJ0L1Byb2plY3RzL25nLXN2Zy1pY29uLXNwcml0ZS9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0U7SUFBTyx3QkFBQTtFQ0VQO0VEREE7SUFBTywwQkFBQTtFQ0lQO0VESEE7SUFBTyx3QkFBQTtFQ01QO0VETEE7SUFBTywyQkFBQTtFQ1FQO0FBQ0Y7QURiQTtFQUNFO0lBQU8sd0JBQUE7RUNFUDtFRERBO0lBQU8sMEJBQUE7RUNJUDtFREhBO0lBQU8sd0JBQUE7RUNNUDtFRExBO0lBQU8sMkJBQUE7RUNRUDtBQUNGO0FETkE7RUFFRSxjQUFBO0VBQ0Esc0NBQUE7RUFDQSxtQ0FBQTtNQUFBLCtCQUFBO0FDT0Y7QURMRTtFQUNFLFVBQUE7RUFDQSw0QkFBQTtNQUFBLHdCQUFBO0FDT0o7QURIQTtFQUNFLGdCQUFBO0VBQ0Esa0NBQUE7QUNNRjtBREpFO0VBQ0UsZ0JBQUE7QUNNSjtBREZBO0VBQ0Usc0NBQUE7RUFDQSxtQ0FBQTtNQUFBLCtCQUFBO0FDS0Y7QURIRTtFQUNFLHlCQUFBO01BQUEscUJBQUE7QUNLSjtBRERBO0VBQ0UsY0FBQTtBQ0lGO0FERkU7RUFDRSxZQUFBO0FDSUo7QURBQTtFQUNFLGlCQUFBO0VBQ0Esa0NBQUE7QUNHRjtBRERFO0VBQ0Usb0JBQUE7QUNHSjtBRENBO0VBQ0Usc0NBQUE7RUFDQSxtQ0FBQTtNQUFBLCtCQUFBO0FDRUY7QURBRTtFQUNFLHlCQUFBO0FDRUo7QURFQTtFQUVFLHlCQUFBO01BQUEscUJBQUE7QUNBRjtBREdBO0VBRUUsdUJBQUE7TUFBQSxtQkFBQTtBQ0RGO0FEUU07RUFDRSxZQUFBO0VBQWMscUNBQUE7RUFDZCxhQUFBO0FDSlI7QURZSTtFQUNFLDJCQUFBO0VBQ0EsZ0NBQUE7TUFBQSw0QkFBQTtBQ1ROIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGtleWZyYW1lcyBteW1vdmUge1xuICAwJSAgIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApOyB9XG4gIDUwJSAgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMnB4KTsgfVxuICA3NSUgIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApOyB9XG4gIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTJweCk7IH1cbn1cblxuLmljb24tZXhhbXBsZXMtMSB7XG4gIC8vIFVzZSBjb2xvciBwcm9wZXJ0eSBmb3Igb3ZlcnJpZGluZyBkZWZhdWx0IGNvbG9yIGFuZCBob3ZlciBlZmZlY3RcbiAgY29sb3I6IGRhcmtyZWQ7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSBlYXNlLWluLW91dCAwLjJzO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xuXG4gICY6aG92ZXIsICY6Zm9jdXMge1xuICAgIGNvbG9yOiByZWQ7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTJkZWcpO1xuICB9XG59XG5cbi5pY29uLWV4YW1wbGVzLTIge1xuICBjb2xvcjogZGFya2dyZWVuO1xuICB0cmFuc2l0aW9uOiBjb2xvciBlYXNlLWluLW91dCAwLjRzO1xuXG4gICY6aG92ZXIsICY6Zm9jdXMge1xuICAgIGNvbG9yOiBsaW1lZ3JlZW47XG4gIH1cbn1cblxuLmljb24tZXhhbXBsZXMtMyB7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSBlYXNlLWluLW91dCAwLjJzO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xuXG4gICY6aG92ZXIsICY6Zm9jdXMge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbiAgfVxufVxuXG4uaWNvbi1leGFtcGxlcy00IHtcbiAgY29sb3I6IGRhcmtyZWQ7XG5cbiAgJjpob3ZlciwgJjpmb2N1cyB7XG4gICAgY29sb3I6IGJyb3duO1xuICB9XG59XG5cbi5pY29uLWV4YW1wbGVzLTUge1xuICBjb2xvcjogZGFya29yYW5nZTtcbiAgdHJhbnNpdGlvbjogY29sb3IgZWFzZS1pbi1vdXQgMC4xcztcblxuICAmOmhvdmVyLCAmOmZvY3VzIHtcbiAgICBjb2xvcjogZGFya2dvbGRlbnJvZDtcbiAgfVxufVxuXG4uaWNvbi1leGFtcGxlcy02IHtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIGVhc2UtaW4tb3V0IDAuMXM7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG5cbiAgJjpob3ZlciwgJjpmb2N1cyB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKDMwZGVnKTtcbiAgfVxufVxuXG4uaWNvbi1zY2FsZS1kb3duIHtcbiAgLy8gU2NhbGUgZG93biBieSA1MCVcbiAgdHJhbnNmb3JtOiBzY2FsZSgwLjUpO1xufVxuXG4uaWNvbi1zY2FsZS11cCB7XG4gIC8vIFNjYWxlIHVwIGJ5IDUwMCVcbiAgdHJhbnNmb3JtOiBzY2FsZSg1KTtcbn1cblxuLy8gQWNjZXNzIHRoZSBTVkcgdmlhIDo6bmctZGVlcCBzZWxlY3RvclxuLmNvbnRhaW5lciB7XG4gIDo6bmctZGVlcCB7XG4gICAgLnN0eWxlZC1pY29uIHtcbiAgICAgIHVzZSB7XG4gICAgICAgIGZpbGw6IG9yYW5nZTsgLyogZXZlcmdyZWVuIGJyb3dzZXIgc3ltYm9sIHN0eWxpbmcgKi9cbiAgICAgICAgc3Ryb2tlOiBibGFjaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLmljb24tY2hhbmdlLXNpemUge1xuICA6Om5nLWRlZXAge1xuICAgIHN2ZyB7XG4gICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuMnM7XG4gICAgICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgY2VudGVyO1xuICAgIH1cbiAgfVxufVxuIiwiQGtleWZyYW1lcyBteW1vdmUge1xuICAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICB9XG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDJweCk7XG4gIH1cbiAgNzUlIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gIH1cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0ycHgpO1xuICB9XG59XG4uaWNvbi1leGFtcGxlcy0xIHtcbiAgY29sb3I6IGRhcmtyZWQ7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSBlYXNlLWluLW91dCAwLjJzO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuLmljb24tZXhhbXBsZXMtMTpob3ZlciwgLmljb24tZXhhbXBsZXMtMTpmb2N1cyB7XG4gIGNvbG9yOiByZWQ7XG4gIHRyYW5zZm9ybTogcm90YXRlKDEyZGVnKTtcbn1cblxuLmljb24tZXhhbXBsZXMtMiB7XG4gIGNvbG9yOiBkYXJrZ3JlZW47XG4gIHRyYW5zaXRpb246IGNvbG9yIGVhc2UtaW4tb3V0IDAuNHM7XG59XG4uaWNvbi1leGFtcGxlcy0yOmhvdmVyLCAuaWNvbi1leGFtcGxlcy0yOmZvY3VzIHtcbiAgY29sb3I6IGxpbWVncmVlbjtcbn1cblxuLmljb24tZXhhbXBsZXMtMyB7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSBlYXNlLWluLW91dCAwLjJzO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xufVxuLmljb24tZXhhbXBsZXMtMzpob3ZlciwgLmljb24tZXhhbXBsZXMtMzpmb2N1cyB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcbn1cblxuLmljb24tZXhhbXBsZXMtNCB7XG4gIGNvbG9yOiBkYXJrcmVkO1xufVxuLmljb24tZXhhbXBsZXMtNDpob3ZlciwgLmljb24tZXhhbXBsZXMtNDpmb2N1cyB7XG4gIGNvbG9yOiBicm93bjtcbn1cblxuLmljb24tZXhhbXBsZXMtNSB7XG4gIGNvbG9yOiBkYXJrb3JhbmdlO1xuICB0cmFuc2l0aW9uOiBjb2xvciBlYXNlLWluLW91dCAwLjFzO1xufVxuLmljb24tZXhhbXBsZXMtNTpob3ZlciwgLmljb24tZXhhbXBsZXMtNTpmb2N1cyB7XG4gIGNvbG9yOiBkYXJrZ29sZGVucm9kO1xufVxuXG4uaWNvbi1leGFtcGxlcy02IHtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIGVhc2UtaW4tb3V0IDAuMXM7XG4gIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XG59XG4uaWNvbi1leGFtcGxlcy02OmhvdmVyLCAuaWNvbi1leGFtcGxlcy02OmZvY3VzIHtcbiAgdHJhbnNmb3JtOiByb3RhdGVZKDMwZGVnKTtcbn1cblxuLmljb24tc2NhbGUtZG93biB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMC41KTtcbn1cblxuLmljb24tc2NhbGUtdXAge1xuICB0cmFuc2Zvcm06IHNjYWxlKDUpO1xufVxuXG4uY29udGFpbmVyIDo6bmctZGVlcCAuc3R5bGVkLWljb24gdXNlIHtcbiAgZmlsbDogb3JhbmdlO1xuICAvKiBldmVyZ3JlZW4gYnJvd3NlciBzeW1ib2wgc3R5bGluZyAqL1xuICBzdHJva2U6IGJsYWNrO1xufVxuXG4uaWNvbi1jaGFuZ2Utc2l6ZSA6Om5nLWRlZXAgc3ZnIHtcbiAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjJzO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiB0b3AgY2VudGVyO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { IconSpriteService } from 'ng-svg-icon-sprite';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  public icon = 'star_100x100_viewbox';\n  public width = '100px';\n  public color = 'red';\n  public changed = false;\n  public changeDone = false;\n\n  constructor(\n    // Optionally inject the icon sprite service to set path manually\n    private iconSpriteService: IconSpriteService\n  ) {}\n\n  ngOnInit() {}\n\n  changeIconPath(src) {\n    this.icon = src.split('#')[1] === 'delete_70x70' ? 'star_100x100_viewbox' : 'delete_70x70';\n    console.log('changed path', this.icon);\n  }\n\n  changeIconSizePlus(width) {\n    this.width = Number(width.replace('px', '')) + 15 + 'px';\n  }\n\n  changeIconSizeMinus(width) {\n    this.width = Number(width.replace('px', '')) - 15 + 'px';\n  }\n\n  changeIconColor(color) {\n    this.color = color;\n  }\n\n  // Optionally, change the default sprite path during runtime\n  changeDefaultSpritePath() {\n    this.changed = true;\n    this.iconSpriteService.setPath('assets/sprites-secondary/sprite.svg');\n    console.log('changeDefaultSpritePath', this.iconSpriteService.getPath());\n\n    setTimeout(() => {\n      // Demo purpose: force change detection to re-render\n      this.changed = false;\n    }, 0);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { IconSpriteModule } from 'ng-svg-icon-sprite';\nimport { environment } from '../environments/environment';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    IconSpriteModule.forRoot({ path: environment.spritePath })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  spritePath: 'assets/sprites/sprite.svg'\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}